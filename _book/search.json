[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "teaching_material_book",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "teal is a shiny-based modular framework. It provides an interactive user interface allowing users to customize tables and visualizations facilitating the exploration and analysis of clinical trial data. Dynamic analysis and display control, data filtering and code reproducibility are included in each module.\nteal modules are laid out in three panels.\n\nThe Left Panel, referred to as the encoding panel, includes elements used to adjust the output interactively.\nThe Center Panel, referred to as the output panel, where the tables and visualizations are displayed.\nThe Right Panel, referred to as the data filter panel, includes elements used to subset the data interactively.\n\nThe layout is pre-set within each module. However, user can decide overall tab order and nesting. See ?fig-layout for the typical teal app structure.\n\n\n\nTypical teal app layout"
  },
  {
    "objectID": "data.html#setup",
    "href": "data.html#setup",
    "title": "2  Introduction",
    "section": "2.2 Setup",
    "text": "2.2 Setup\nIn this tutorial we will be working with realistic looking but simulated data.\n\nif (!require(\"remotes\")) install.packages(\"remotes\")\n\n# install teal\nremotes::install_github(\"insightsengineering/teal@*release\")\n# install teal.modules.general\nremotes::install_github(\"insightsengineering/teal.modules.general@*release\")\n\n\nlibrary(random.cdisc.data)\nlibrary(teal.data)\n\nLoading required package: shiny\n\nlibrary(scda)\n\nThere are no scda.XXXX libraries installed, like scda.2022.\nPlease install an scda database to take full advantage of the scda package.\n\nlibrary(teal.modules.general)\n\nLoading required package: ggmosaic\n\n\nLoading required package: ggplot2\n\n\nLoading required package: shinyTree\n\n\nLoading required package: teal\n\n\nLoading required package: teal.transform\n\n\nLoading required package: magrittr\n\n\n\nYou are using teal version 0.12.0\n\nlibrary(sparkline)\n\n\nlibrary(teal)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "data.html#what-data-do-we-use",
    "href": "data.html#what-data-do-we-use",
    "title": "2  Introduction",
    "section": "2.3 What data do we use",
    "text": "2.3 What data do we use\nWe first load two synthetic data sets. random.cdisc.data::cadsl is a Subject Level Analysis Dataset (ADSL) with one record (row) per subject. The unique identifier per subject is stored in the variable USUBJID. According to CDISC the main purpose of ADSL is to provide a “(…) source for denominators for populations of interest, stratification variables, and other important subject subgroups”.\n\nADSL <- random.cdisc.data::cadsl\n\nData Structure for Adverse Event Analysis\n\nADAE <- random.cdisc.data::cadae\nADAE\n\n# A tibble: 1,934 × 92\n   STUDYID USUBJID    SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n   <chr>   <chr>      <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n 1 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 2 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 3 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 4 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 5 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 6 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 7 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 8 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 9 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n10 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n# … with 1,924 more rows, and 81 more variables: INVID <chr>, INVNAM <chr>,\n#   ARM <fct>, ARMCD <fct>, ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>,\n#   TRT01A <fct>, TRT02P <fct>, TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>,\n#   STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>,\n#   BMEASIFL <fct>, BEP01FL <fct>, AEWITHFL <fct>, RANDDT <date>,\n#   TRTSDTM <dttm>, TRTEDTM <dttm>, TRT01SDTM <dttm>, TRT01EDTM <dttm>,\n#   TRT02SDTM <dttm>, TRT02EDTM <dttm>, AP01SDTM <dttm>, AP01EDTM <dttm>, …\n\n\nAnalysis data-set for time to event.\n\nADTTE <- random.cdisc.data::cadtte\nADTTE\n\n# A tibble: 2,000 × 68\n   STUDYID USUBJID    SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n   <chr>   <chr>      <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n 1 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 2 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 3 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 4 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 5 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 6 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 7 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 8 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 9 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n10 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n# … with 1,990 more rows, and 57 more variables: INVID <chr>, INVNAM <chr>,\n#   ARM <fct>, ARMCD <fct>, ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>,\n#   TRT01A <fct>, TRT02P <fct>, TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>,\n#   STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>,\n#   BMEASIFL <fct>, BEP01FL <fct>, AEWITHFL <fct>, RANDDT <date>,\n#   TRTSDTM <dttm>, TRTEDTM <dttm>, TRT01SDTM <dttm>, TRT01EDTM <dttm>,\n#   TRT02SDTM <dttm>, TRT02EDTM <dttm>, AP01SDTM <dttm>, AP01EDTM <dttm>, …"
  },
  {
    "objectID": "data.html#getting-started",
    "href": "data.html#getting-started",
    "title": "2  Introduction",
    "section": "2.4 Getting started",
    "text": "2.4 Getting started\nThe most crucial function of the teal package(s) is the teal::init() function, which is structured as follows:\n\ninit(\n  data,\n  modules,\n  title = NULL,\n  filter = list(),\n  header = tags$p(\"Add Title Here\"),\n  footer = tags$p(\"Add Footer Here\"),\n  id = character(0)\n)\n\nThe init function sets up a shiny app that consists of teal modules. Let’s go through the arguments:\n\n2.4.1 Data\nIn the data argument we can define one or more data-frames for the application. If more than one data-frames are specified, they should be combined as a list, e.g. data = list(ADSL, ADTR).\nIf you work with ADaM datasets, the package teal.data provides helper functions with which the data argument of init() can be specified, — the cdisc_data() and the cdisc_dataset() functions. They allow the teal app to know the merge key variables of the data-sets. The cdisc_datafunction returns an S6 object.\n\n\n\n\n\n\nkeys are prespecified variables in ADaM data to merge data-sets. Each type of data-set requires specific keys to be specified. The package teal.data automatically chooses the correct key variables based on the dataname for the following data-sets: ADSL, ADAE, ADEG, ADTTE, ADAETTE, ADCM, ADEX, ADLB, ADMH, ADQS, ADRS, ADSAFTTE, ADVS, ADDV, ADSUB, ADHY.\nIf you want to work with other ADaM data-sets you must specify the keys manually. ADTR is a Tumor Results Analysis data-set where there is one record (row) per subject. As of now, this is not part of the default cdisc keys in the teal.data package, so we would have to specify them manually:\n\nADTR <- random.cdisc.data::cadtr\n\n\ncdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADTR\", ADTR, keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\")))\n\nNote that all keys have to be specified.\n\n\n\n\n\n2.4.2 Pre-processing\nGenerally, it is recommended to collect all data pre-processing steps in a separate R-script, which can then directly be applied to the `cdisc_data()` output. One such preprocessing steps could be the creation of a new variable in the ADSL data-set which splits patients into two age groups where patients younger than 40 are AGEGR = 0 and patients older than 40 are AGEGR = 1.\n\n# you would write this in a seperate file directly, without the writeLines command.\nwriteLines(\n  text = c(\"ADSL <- ADSL %>%\n      dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\"),\n  con = \"ADSL_preproc.R\"\n)\n\nThe resulting R file looks something like this:\nADSL <- ADSL %>% dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\n\nADSL_processed <- ADSL %>% \n  cdisc_dataset(\"ADSL\", .) %>% \n  mutate_dataset(script = \"ADSL_preproc.R\")\n# check if the new variable exists:\nADSL_processed$get_raw_data()$AGEGR\n\n  [1] 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n [38] 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0\n [75] 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1\n[112] 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0\n[149] 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n[186] 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0\n[223] 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0\n[260] 0 1 1 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n[297] 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0\n[334] 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1\n[371] 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\n\n\nIn a real world case we would not necessarily want to separately save the preprocessed ADSL in our environment. Instead, we would apply the preprocessing within the data argument of the init() function, e.g., like this:\n\napp <- teal::init(data = cdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL) %>% \n    mutate_dataset(script = \"ADSL_preproc.R\"),\n  cdisc_dataset(\"ADAE\", ADAE),\n  cdisc_dataset(\"ADTTE\", ADTTE)\n  # <<additional dataset code>> \n  ),\n  #  <<additional init arguments code>>"
  },
  {
    "objectID": "data.html#define-the-app",
    "href": "data.html#define-the-app",
    "title": "2  Introduction",
    "section": "2.6 Define the app",
    "text": "2.6 Define the app\n\napp <- teal::init(data = cdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADAE\", ADAE),\n  cdisc_dataset(\"ADTTE\", ADTTE)\n  # <<additional dataset code>>\n),\nmodules = modules(tm_variable_browser(label = \"View Variables\")),\nheader = \"My first application\")\n\nshinyApp(app$ui, app$server)\n\nThe output should look something like this:"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Introduction",
    "section": "",
    "text": "3"
  },
  {
    "objectID": "data.html#aim-of-this-chapter",
    "href": "data.html#aim-of-this-chapter",
    "title": "2  Introduction",
    "section": "2.1 Aim of this chapter",
    "text": "2.1 Aim of this chapter"
  },
  {
    "objectID": "data.html#modules",
    "href": "data.html#modules",
    "title": "2  Introduction",
    "section": "2.5 Modules",
    "text": "2.5 Modules\nteal modules are modular building blocks for your shiny app. They implement specific app functionalities, such as outlier exploration, data visualizations, and survival analysis. Although modules can be created from scratch, many teal modules have already been released and can be found in the following packages:\n\nteal.modules.general: general modules for exploring relational/independent/CDISC data\nteal.modules.clinical: modules specific to CDISC data and clinical trial reporting\nteal.modules.hermes: modules for analyzing MultiAssayExperiment objects\n\nare shiny modules built within the teal framework that specify analysis to be performed."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "2"
  },
  {
    "objectID": "introduction.html#aim-of-this-chapter",
    "href": "introduction.html#aim-of-this-chapter",
    "title": "1  Introduction",
    "section": "1.1 Aim of this chapter",
    "text": "1.1 Aim of this chapter\n\nUnderstand the structure of teal apps\nUnderstand the utility of teal apps\nGet familiar with the workflow to create a teal app\nBe able to write your own first app to display data"
  },
  {
    "objectID": "introduction.html#structure-of-teal-apps",
    "href": "introduction.html#structure-of-teal-apps",
    "title": "1  Introduction",
    "section": "1.1 Structure of teal apps",
    "text": "1.1 Structure of teal apps\nteal is a shiny-based modular framework. It provides an interactive user interface allowing users to customize tables and visualizations facilitating the exploration and analysis of clinical trial data. Dynamic analysis and display control, data filtering and code reproducibility are included in each module.\nteal modules are laid out in three panels.\n\nThe Left Panel, referred to as the encoding panel, includes elements used to adjust the output interactively.\nThe Center Panel, referred to as the output panel, where the tables and visualizations are displayed.\nThe Right Panel, referred to as the data filter panel, includes elements used to subset the data interactively.\n\nThe layout is pre-set within each module. However, user can decide overall tab order and nesting. See ?fig-layout for the typical teal app structure.\n\n\n\nTypical teal app layout\n\n\n\n1.1.1 Modules\nteal modules are modular building blocks for your teal app. They implement specific app functionalities, such as outlier exploration, data visualizations, and survival analysis. Although modules can be created from scratch, many teal modules have already been released and can be found in the following packages:\n\nteal.modules.general: general modules for exploring relational/independent/CDISC data\nteal.modules.clinical: modules specific to CDISC data and clinical trial reporting\nteal.modules.hermes: modules for analyzing MultiAssayExperiment objects\n\nare shiny modules built within the teal framework that specify analysis to be performed."
  },
  {
    "objectID": "introduction.html#setup",
    "href": "introduction.html#setup",
    "title": "1  Introduction",
    "section": "1.2 Setup",
    "text": "1.2 Setup\nIn this tutorial we will be working with realistic looking but simulated data.\n\nif (!require(\"remotes\")) install.packages(\"remotes\")\n\n# install teal\nremotes::install_github(\"insightsengineering/teal@*release\")\n\n# install teal.modules.general\nremotes::install_github(\"insightsengineering/teal.modules.general@*release\")\n\n# install teal.modules.hermes\nremotes::install_github(\"insightsengineering/teal.modules.hermes@*release\")\n\n\nlibrary(random.cdisc.data)\nlibrary(teal.data)\n\nLoading required package: shiny\n\nlibrary(scda)\n\nThere are no scda.XXXX libraries installed, like scda.2022.\nPlease install an scda database to take full advantage of the scda package.\n\nlibrary(teal.modules.general)\n\nLoading required package: ggmosaic\n\n\nLoading required package: ggplot2\n\n\nLoading required package: shinyTree\n\n\nLoading required package: teal\n\n\nLoading required package: teal.transform\n\n\nLoading required package: magrittr\n\n\n\nYou are using teal version 0.12.0\n\nlibrary(sparkline)\n\n\nlibrary(teal)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nWe first load two synthetic data sets. random.cdisc.data::cadsl is a Subject Level Analysis Dataset (ADSL) with one record (row) per subject. The unique identifier per subject is stored in the variable USUBJID. According to CDISC the main purpose of ADSL is to provide a “(…) source for denominators for populations of interest, stratification variables, and other important subject subgroups”.\n\nADSL <- random.cdisc.data::cadsl\n\nData Structure for Adverse Event Analysis\n\nADAE <- random.cdisc.data::cadae\nADAE\n\n# A tibble: 1,934 × 92\n   STUDYID USUBJID    SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n   <chr>   <chr>      <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n 1 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 2 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 3 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 4 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 5 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 6 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 7 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 8 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 9 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n10 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n# … with 1,924 more rows, and 81 more variables: INVID <chr>, INVNAM <chr>,\n#   ARM <fct>, ARMCD <fct>, ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>,\n#   TRT01A <fct>, TRT02P <fct>, TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>,\n#   STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>,\n#   BMEASIFL <fct>, BEP01FL <fct>, AEWITHFL <fct>, RANDDT <date>,\n#   TRTSDTM <dttm>, TRTEDTM <dttm>, TRT01SDTM <dttm>, TRT01EDTM <dttm>,\n#   TRT02SDTM <dttm>, TRT02EDTM <dttm>, AP01SDTM <dttm>, AP01EDTM <dttm>, …\n\n\nAnalysis data-set for time to event (efficacy).\n\nADTTE <- random.cdisc.data::cadtte\nADTTE\n\n# A tibble: 2,000 × 68\n   STUDYID USUBJID    SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n   <chr>   <chr>      <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n 1 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 2 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 3 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 4 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 5 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 6 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 7 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 8 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 9 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n10 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n# … with 1,990 more rows, and 57 more variables: INVID <chr>, INVNAM <chr>,\n#   ARM <fct>, ARMCD <fct>, ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>,\n#   TRT01A <fct>, TRT02P <fct>, TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>,\n#   STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>,\n#   BMEASIFL <fct>, BEP01FL <fct>, AEWITHFL <fct>, RANDDT <date>,\n#   TRTSDTM <dttm>, TRTEDTM <dttm>, TRT01SDTM <dttm>, TRT01EDTM <dttm>,\n#   TRT02SDTM <dttm>, TRT02EDTM <dttm>, AP01SDTM <dttm>, AP01EDTM <dttm>, …"
  },
  {
    "objectID": "introduction.html#what-data-we-use-in-this-project",
    "href": "introduction.html#what-data-we-use-in-this-project",
    "title": "1  Introduction",
    "section": "1.4 What data we use in this project",
    "text": "1.4 What data we use in this project\nWe first load two synthetic data sets. random.cdisc.data::cadsl is a Subject Level Analysis Dataset (ADSL) with one record (row) per subject. The unique identifier per subject is stored in the variable USUBJID. According to CDISC the main purpose of ADSL is to provide a “(…) source for denominators for populations of interest, stratification variables, and other important subject subgroups”.\n\nADSL <- random.cdisc.data::cadsl\n\nData Structure for Adverse Event Analysis\n\nADAE <- random.cdisc.data::cadae\nADAE\n\n# A tibble: 1,934 × 92\n   STUDYID USUBJID    SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n   <chr>   <chr>      <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n 1 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 2 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 3 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 4 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 5 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 6 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 7 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 8 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n 9 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n10 AB12345 AB12345-B… id-141 BRA-1     35 YEARS F     WHITE NOT H… BRA     N    \n# … with 1,924 more rows, and 81 more variables: INVID <chr>, INVNAM <chr>,\n#   ARM <fct>, ARMCD <fct>, ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>,\n#   TRT01A <fct>, TRT02P <fct>, TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>,\n#   STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>,\n#   BMEASIFL <fct>, BEP01FL <fct>, AEWITHFL <fct>, RANDDT <date>,\n#   TRTSDTM <dttm>, TRTEDTM <dttm>, TRT01SDTM <dttm>, TRT01EDTM <dttm>,\n#   TRT02SDTM <dttm>, TRT02EDTM <dttm>, AP01SDTM <dttm>, AP01EDTM <dttm>, …\n\n\nAnalysis data-set for time to event (efficacy).\n\nADTTE <- random.cdisc.data::cadtte\nADTTE\n\n# A tibble: 2,000 × 68\n   STUDYID USUBJID    SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n   <chr>   <chr>      <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n 1 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 2 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 3 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 4 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 5 AB12345 AB12345-B… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n 6 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 7 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 8 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n 9 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n10 AB12345 AB12345-B… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n# … with 1,990 more rows, and 57 more variables: INVID <chr>, INVNAM <chr>,\n#   ARM <fct>, ARMCD <fct>, ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>,\n#   TRT01A <fct>, TRT02P <fct>, TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>,\n#   STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>,\n#   BMEASIFL <fct>, BEP01FL <fct>, AEWITHFL <fct>, RANDDT <date>,\n#   TRTSDTM <dttm>, TRTEDTM <dttm>, TRT01SDTM <dttm>, TRT01EDTM <dttm>,\n#   TRT02SDTM <dttm>, TRT02EDTM <dttm>, AP01SDTM <dttm>, AP01EDTM <dttm>, …"
  },
  {
    "objectID": "introduction.html#creating-your-first-app",
    "href": "introduction.html#creating-your-first-app",
    "title": "1  Introduction",
    "section": "1.5 Creating your first app",
    "text": "1.5 Creating your first app\n\n1.5.1 Code structure\nFirst, you want to define the project metadata. This can include the author name, the study name, the molecule name, etc. then, we have a section where we can define parameters for the app. This can be simple parameter values but they can also be short code snippets that would otherwise often be repeated throughout the application, e.g. preselected variables of interest.\nAfter that, we define the app using the init() function. This function takes data, modules, and html input and returns a list (usually named app) containing the user interface (the ui object) and back end (the server object) of the application. In the final step we instantiate the app by calling shinyApp(app$ui, app$server).\n\n\n1.5.2 init()\nThe most crucial function of the teal package(s) is the teal::init() function, which is structured as follows:\n\ninit(\n  data,\n  modules,\n  title = NULL,\n  filter = list(),\n  header = tags$p(\"Add Title Here\"),\n  footer = tags$p(\"Add Footer Here\"),\n  id = character(0))\n\nThe init() function sets up a shiny app that consists of teal modules. Let’s go through the arguments:\ndata\nIn the data argument we define one or more data-frames for the application. If more than one data-frames are specified, they should be combined as a list, e.g. data = list(ADSL, ADTR).  For ADaM data-sets, the package teal.data provides helper functions with which the data argument of init() can be specified, — the cdisc_data() and the cdisc_dataset() functions. They allow the teal app to know the merge key variables of the data-sets. The cdisc_datafunction returns an S6 object.\n\n\n\n\n\n\nkeys are prespecified variables in ADaM data to merge data-sets. Each type of data-set requires specific keys to be specified. The package teal.data automatically chooses the correct key variables based on the dataname for the following data-sets: ADSL, ADAE, ADEG, ADTTE, ADAETTE, ADCM, ADEX, ADLB, ADMH, ADQS, ADRS, ADSAFTTE, ADVS, ADDV, ADSUB, ADHY.\nIf you want to work with other ADaM data-sets you must specify the keys manually. ADTR is a Tumor Results Analysis data-set where there is one record (row) per subject. As of now, this is not part of the default cdisc keys in the teal.data package, so we would have to specify them manually:\n\nADTR <- random.cdisc.data::cadtr\n\n\ncdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADTR\", ADTR, keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\")))\n\nNote that all keys have to be specified.\n\n\n\nPre-processing\nGenerally, it is recommended to collect all data pre-processing steps in a separate R-script, which can then directly be applied to the `cdisc_data()` output. One such preprocessing steps could be the creation of a new variable in the ADSL data-set which splits patients into two age groups where patients younger than 40 are AGEGR = 0 and patients older than 40 are AGEGR = 1.\n\n# you would write this in a seperate file directly, without the writeLines command.\nwriteLines(\n  text = c(\"ADSL <- ADSL %>%\n      dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\"),\n  con = \"ADSL_preproc.R\"\n)\n\nThe resulting R file looks something like this:\nADSL <- ADSL %>% dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\n\nADSL_processed <- ADSL %>% \n  cdisc_dataset(\"ADSL\", .) %>% \n  mutate_dataset(script = \"ADSL_preproc.R\")\n# check if the new variable exists:\nADSL_processed$get_raw_data()$AGEGR\n\n  [1] 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n [38] 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0\n [75] 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1\n[112] 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0\n[149] 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n[186] 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0\n[223] 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0\n[260] 0 1 1 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n[297] 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0\n[334] 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1\n[371] 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\n\n\nIn a real world case we would not necessarily want to separately save the preprocessed ADSL in our environment. Instead, we would apply the preprocessing within the data argument of the init() function, e.g., like this:\n\napp <- teal::init(data = cdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL) %>% \n    mutate_dataset(script = \"ADSL_preproc.R\"),\n  cdisc_dataset(\"ADAE\", ADAE),\n  cdisc_dataset(\"ADTTE\", ADTTE)\n  # <<additional dataset code>> \n  ),\n  #  <<additional init arguments code>>\n\n\n\n1.5.3 modules"
  },
  {
    "objectID": "introduction.html#define-the-app",
    "href": "introduction.html#define-the-app",
    "title": "1  Introduction",
    "section": "1.7 Define the app",
    "text": "1.7 Define the app\n\napp <- teal::init(data = cdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADAE\", ADAE),\n  cdisc_dataset(\"ADTTE\", ADTTE)\n  # <<additional dataset code>>\n),\nmodules = modules(tm_variable_browser(label = \"View Variables\")),\nheader = \"My first application\")\n\nshinyApp(app$ui, app$server)\n\nThe output should look something like this:"
  },
  {
    "objectID": "index.html#who-ist-this-for",
    "href": "index.html#who-ist-this-for",
    "title": "teaching_material_book",
    "section": "Who ist this for",
    "text": "Who ist this for\nThis tutorial is aimed at data scientists / analysts who want to write their first teal application. We expect you to already have some R experience and that you know what you want to achieve with the application. You do not need to know how to create a shiny application. The teal package aims to make the creation of (teal-specific) shiny applications relatively intuitive without the need to understand how shiny works exactly. Shiny knowledge is useful once you want to either modify an application, or write your own teal module from scratch."
  },
  {
    "objectID": "index.html#what-will-you-learn",
    "href": "index.html#what-will-you-learn",
    "title": "teaching_material_book",
    "section": "What will you learn",
    "text": "What will you learn"
  },
  {
    "objectID": "index.html#how-is-it-structured",
    "href": "index.html#how-is-it-structured",
    "title": "teaching_material_book",
    "section": "How is it structured",
    "text": "How is it structured\nAll chapters in this book follow a common structure: First, the learning goals of a chapter is defined. We then go through the step-by-step process of using specific teal modules. In each chapter we combine what we learned into one code chunk with which we can create a functional teal application. As every teal app requires data, the app created in the introduction will be the fundamental building block of the apps in the subsequent chapters. In the toy apps created in each chapter you should be able to understand every line of code. The code for a more developed app (but built for the same purpose) and a deployed instance of that app is linked at the end of each chapter. What you learned in this chapter should give you a good understanding of how the more developed application works."
  },
  {
    "objectID": "index.html#where-can-you-find-more",
    "href": "index.html#where-can-you-find-more",
    "title": "teaching_material_book",
    "section": "Where can you find more",
    "text": "Where can you find more"
  },
  {
    "objectID": "efficacy.html",
    "href": "efficacy.html",
    "title": "2  efficacy",
    "section": "",
    "text": "http://docs.roche.com/#/agile-R/2022_01_28/teal/sample_apps/sample-app-efficacy/"
  },
  {
    "objectID": "introduction.html#your-first-app",
    "href": "introduction.html#your-first-app",
    "title": "1  Introduction",
    "section": "1.4 Your first app",
    "text": "1.4 Your first app"
  },
  {
    "objectID": "introduction.html#code-structure",
    "href": "introduction.html#code-structure",
    "title": "1  Introduction",
    "section": "1.5 Code structure",
    "text": "1.5 Code structure\nFirst, you want to define the project metadata. This can include the author name, the study name, the molecule name, etc. then, we have a section where we can define parameters for the app. This can be simple parameter values but they can also be short code snippets that would otherwise often be repeated throughout the application, e.g. preselected variables of interest.\nAfter that, we define the app using the init() function. This function takes data, modules, and html input and returns a list (usually named app) containing the user interface (the ui object) and back end (the server object) of the application. In the final step we instantiate the app by calling shinyApp(app$ui, app$server)."
  },
  {
    "objectID": "introduction.html#init",
    "href": "introduction.html#init",
    "title": "1  Introduction",
    "section": "1.6 init()",
    "text": "1.6 init()\nThe most crucial function of the teal package(s) is the teal::init() function, which is structured as follows:\n\ninit(\n  data,\n  modules,\n  title = NULL,\n  filter = list(),\n  header = tags$p(\"Add Title Here\"),\n  footer = tags$p(\"Add Footer Here\"),\n  id = character(0))\n\nThe init() function sets up a shiny app that consists of teal modules. Let’s go through the arguments:\ndata\nIn the data argument we define one or more data-frames for the application. If more than one data-frames are specified, they should be combined as a list, e.g. data = list(ADSL, ADTR).  For ADaM data-sets, the package teal.data provides helper functions with which the data argument of init() can be specified, — the cdisc_data() and the cdisc_dataset() functions. They allow the teal app to know the merge key variables of the data-sets. The cdisc_datafunction returns an S6 object.\n\n\n\n\n\n\nkeys are prespecified variables in ADaM data to merge data-sets. Each type of data-set requires specific keys to be specified. The package teal.data automatically chooses the correct key variables based on the dataname for the following data-sets: ADSL, ADAE, ADEG, ADTTE, ADAETTE, ADCM, ADEX, ADLB, ADMH, ADQS, ADRS, ADSAFTTE, ADVS, ADDV, ADSUB, ADHY.\nIf you want to work with other ADaM data-sets you must specify the keys manually. ADTR is a Tumor Results Analysis data-set where there is one record (row) per subject. As of now, this is not part of the default cdisc keys in the teal.data package, so we would have to specify them manually:\n\nADTR <- random.cdisc.data::cadtr\n\n\ncdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADTR\", ADTR, keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\")))\n\nNote that all keys have to be specified.\n\n\n\n\n\n\n\n\n\npre-processing\n\n\n\nGenerally, it is recommended to collect all data pre-processing steps in a separate R-script, which can then directly be applied to the `cdisc_data()` output. One such preprocessing steps could be the creation of a new variable in the ADSL data-set which splits patients into two age groups where patients younger than 40 are AGEGR = 0 and patients older than 40 are AGEGR = 1.\n\n# you would write this in a seperate file directly, without the writeLines command.\nwriteLines(\n  text = c(\"ADSL <- ADSL %>%\n      dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\"),\n  con = \"ADSL_preproc.R\"\n)\n\nThe resulting R file looks something like this:\nADSL <- ADSL %>% dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\n\nADSL_processed <- ADSL %>% \n  cdisc_dataset(\"ADSL\", .) %>% \n  mutate_dataset(script = \"ADSL_preproc.R\")\n# check if the new variable exists:\nADSL_processed$get_raw_data()$AGEGR\n\n  [1] 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n [38] 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0\n [75] 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1\n[112] 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0\n[149] 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n[186] 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0\n[223] 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0\n[260] 0 1 1 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n[297] 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0\n[334] 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1\n[371] 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\n\n\nIn a real world case we would not necessarily want to separately save the preprocessed ADSL in our environment. Instead, we would apply the preprocessing within the data argument of the init() function, e.g., like this:\n\napp <- teal::init(data = cdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL) %>% \n    mutate_dataset(script = \"ADSL_preproc.R\"),\n  cdisc_dataset(\"ADAE\", ADAE),\n  cdisc_dataset(\"ADTTE\", ADTTE)\n  # <<additional dataset code>> \n  ),\n  #  <<additional init arguments code>>\n\n\n\n\n1.6.1 modules\nheader\nfooter\nid"
  }
]