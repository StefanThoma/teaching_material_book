{
  "hash": "c7137bf80855212a0456ce251c924344",
  "result": {
    "markdown": "---\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n<!-- I can find the big teal apps on: https://docs.roche.com/doc/teal.gallery/2022_10_13/articles/sources.html -->\n\n# Data app\n\n\n\n\n\nThe App created at the end of this chapter will be the basic building block of all subsequent chapters in this book.\nThe structure of the app code will remain consistent throughout the book --- make sure you understand each line of code of the *toy* application at the end.\n\n**At the end of this chapter you should be able to**\n\n-   understand the code structure of `teal` apps\n-   understand the workflow to create a `teal` app\n-   install and load the relevant packages\n-   write your own app that displays data\n\n## Your first app\n\nAs is generally the case when you start a project, you should have an approximate idea of what you would like to achieve.\nIn this chapter, the aim is to create an app that visualizes variables of three connected study data-sets.\nThe app should also display meta-data guiding users through the app itself.\n\nIn most applications where `teal` apps are useful, the above should be included.\nTherefore, all subsequent chapters are built upon the toy app created in this chapter.\n\n## Code structure\n\n-   First, you want to define the project metadata and load the required packages and the data.\n    This can include the author name, the study name, the molecule name, etc.\n\n-   Then, we have a section where we can define parameters for the app.\n    Parameters can be simple (e.g. `background_color <- \"gray\"` ) but they can also be short code snippets that would otherwise often be repeated throughout the application, e.g. pre-selected variables of interest.\n\n-   After that, we define the app using the `init()` function.\n    This function takes data, modules, and html input and returns a list (usually named `app`) containing the user interface (the `ui` object) and back end (the `server` object) of the application.\n\n-   In the final step we instantiate the app by calling `shinyApp(app$ui, app$server)`.\n\n## Setup\n\nIn this tutorial we will be working with realistic looking but simulated data.\n\n\n::: {.cell file='R/snippets/install_packages.R'}\n\n```{.r .cell-code}\nif (!require(\"remotes\")) install.packages(\"remotes\")\n\n# install teal\nremotes::install_github(\"insightsengineering/teal@*release\")\n\n# install teal.modules.general\nremotes::install_github(\"insightsengineering/teal.modules.general@*release\")\n\n# install tern mmrm (required for teal.modules.clinical)\nremotes::install_github(\"insightsengineering/tern.mmrm@*release\")\n\n# install teal.modules.clinical\nremotes::install_github(\"insightsengineering/teal.modules.clinical@*release\")\n\n# install teal.modules.hermes\nremotes::install_github(\"insightsengineering/teal.modules.hermes@*release\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWe first load two synthetic data sets.\n`random.cdisc.data::cadsl` is a Subject Level Analysis Dataset (ADSL) with one record (row) per subject.\nThe unique identifier per subject is stored in the variable `USUBJID`.\nAccording to [CDISC](https://www.cdisc.org/education/course/subject-level-analysis-dataset-adsl) the main purpose of ADSL is to provide a \"(...) source for denominators for populations of interest, stratification variables, and other important subject subgroups\".\n\nWe can now load the three data-sets:\n\nData Structure for Adverse Event Analysis\n\n| Data-set name | Explanation                          | Purpose        |\n|---------------|--------------------------------------|----------------|\n| ADSL          | Analysis data-set subject level      | Filtering      |\n| ADAE          | Analysis data-set for adverse events | Adverse events |\n| ADTTE         | Analysis data-set for time to event  | Efficacy       |\n\n\n::: {.cell}\n\n```{.r .cell-code}\nADSL <- random.cdisc.data::cadsl\nADAE <- random.cdisc.data::cadae\nADTTE <- random.cdisc.data::cadtte\n```\n:::\n\n\nLet's look at the first three rows of the data-frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(ADSL, ADAE, ADTTE) %>% map(head, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 3 × 56\n  STUDYID USUBJID     SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n  <chr>   <chr>       <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n1 AB12345 AB12345-CH… id-128 CHN-3     32 YEARS M     ASIAN HISPA… CHN     Y    \n2 AB12345 AB12345-CH… id-262 CHN-15    35 YEARS M     BLAC… NOT H… CHN     N    \n3 AB12345 AB12345-RU… id-378 RUS-3     30 YEARS F     ASIAN NOT H… RUS     N    \n# … with 45 more variables: INVID <chr>, INVNAM <chr>, ARM <fct>, ARMCD <fct>,\n#   ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>, TRT01A <fct>, TRT02P <fct>,\n#   TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>,\n#   BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>, BMEASIFL <fct>, BEP01FL <fct>,\n#   AEWITHFL <fct>, RANDDT <date>, TRTSDTM <dttm>, TRTEDTM <dttm>,\n#   TRT01SDTM <dttm>, TRT01EDTM <dttm>, TRT02SDTM <dttm>, TRT02EDTM <dttm>,\n#   AP01SDTM <dttm>, AP01EDTM <dttm>, AP02SDTM <dttm>, AP02EDTM <dttm>, …\n\n[[2]]\n# A tibble: 3 × 92\n  STUDYID USUBJID     SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n  <chr>   <chr>       <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n1 AB12345 AB12345-BR… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n2 AB12345 AB12345-BR… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n3 AB12345 AB12345-BR… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n# … with 81 more variables: INVID <chr>, INVNAM <chr>, ARM <fct>, ARMCD <fct>,\n#   ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>, TRT01A <fct>, TRT02P <fct>,\n#   TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>,\n#   BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>, BMEASIFL <fct>, BEP01FL <fct>,\n#   AEWITHFL <fct>, RANDDT <date>, TRTSDTM <dttm>, TRTEDTM <dttm>,\n#   TRT01SDTM <dttm>, TRT01EDTM <dttm>, TRT02SDTM <dttm>, TRT02EDTM <dttm>,\n#   AP01SDTM <dttm>, AP01EDTM <dttm>, AP02SDTM <dttm>, AP02EDTM <dttm>, …\n\n[[3]]\n# A tibble: 3 × 68\n  STUDYID USUBJID     SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n  <chr>   <chr>       <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n1 AB12345 AB12345-BR… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n2 AB12345 AB12345-BR… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n3 AB12345 AB12345-BR… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n# … with 57 more variables: INVID <chr>, INVNAM <chr>, ARM <fct>, ARMCD <fct>,\n#   ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>, TRT01A <fct>, TRT02P <fct>,\n#   TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>,\n#   BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>, BMEASIFL <fct>, BEP01FL <fct>,\n#   AEWITHFL <fct>, RANDDT <date>, TRTSDTM <dttm>, TRTEDTM <dttm>,\n#   TRT01SDTM <dttm>, TRT01EDTM <dttm>, TRT02SDTM <dttm>, TRT02EDTM <dttm>,\n#   AP01SDTM <dttm>, AP01EDTM <dttm>, AP02SDTM <dttm>, AP02EDTM <dttm>, …\n```\n:::\n:::\n\n\n## `init()`\n\nThe most crucial function of the `teal` package(s) is [the `teal::init()` function](https://insightsengineering.github.io/teal/main/reference/init.html?q=init#null), which is structured as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit(\n  data,\n  modules,\n  title = NULL,\n  filter = list(),\n  header = tags$p(\"Add Title Here\"),\n  footer = tags$p(\"Add Footer Here\"),\n  id = character(0)\n)\n```\n:::\n\n\nThe `init()` function sets up a shiny app that consists of `teal` modules.\nLet's go through the arguments:\n\n**`data`**\n\nIn the `data` argument we define one or more data-frames for the application.\nIf more than one data-frames are specified, they should be combined as a list, e.g. `data = list(ADSL, ADTR)`.\n<!-- For relational data-sets you can define merge keys.  --> For ADaM data-sets, the package `teal.data` provides helper functions with which the `data` argument of `init()` can be specified, --- the `cdisc_data()` and the `cdisc_dataset()` functions.\nThey allow the teal app to know the merge key variables of the data-sets.\nThe `cdisc_data`function returns an S6 object.\n\n::: {#note:key .callout-note appearance=\"simple\"}\n`keys` are pre-specified variables in ADaM data to merge data-sets.\nEach type of data-set requires specific keys to be specified.\nThe package `teal.data` automatically chooses the correct key variables based on the `dataname` for the following data-sets: ADSL, ADAE, ADEG, ADTTE, ADAETTE, ADCM, ADEX, ADLB, ADMH, ADQS, ADRS, ADSAFTTE, ADVS, ADDV, ADSUB, ADHY.\n\nIf you want to work with other ADaM data-sets you must specify the keys manually.\nADTR is a Tumor Results Analysis data-set where there is one record (row) per subject.\nAs of now, this is not part of the default cdisc keys in the `teal.data` package, so we would have to specify them manually:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nADTR <- random.cdisc.data::cadtr\n\n\ncdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADTR\", ADTR, keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\"))\n)\n```\n:::\n\n\nNote that all keys have to be specified.\n:::\n\nOften, pre-processing of data is still necessary.\nGenerally, it is recommended to collect all data pre-processing steps in a separate R-script, which can then directly be applied to the `cdisc_data()` output.\nOne such pre-processing steps could be the creation of a new variable in the ADSL data-set which splits patients into two age groups where patients younger than 40 are `AGEGR = 0` and patients older than 40 are `AGEGR = 1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# you would write this in a separate file directly, without the writeLines command.\nwriteLines(\n  text = \"\nADSL <- ADSL %>%\n  dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\",\n  con = \"ADSL_preproc.R\"\n)\n```\n:::\n\n\nThe resulting R file looks something like this:\n\n\n::: {.cell file='ADSL_preproc.R'}\n\n```{.r .cell-code}\nADSL <- ADSL %>%\n  dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nADSL_processed <- ADSL %>%\n  cdisc_dataset(\"ADSL\", .) %>%\n  mutate_dataset(script = \"ADSL_preproc.R\")\n# check if the new variable exists:\nADSL_processed$get_raw_data()$AGEGR\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n [38] 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0\n [75] 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1\n[112] 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0\n[149] 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n[186] 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0\n[223] 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0\n[260] 0 1 1 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n[297] 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0\n[334] 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1\n[371] 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\n```\n:::\n:::\n\n\nIn practice, we would not necessarily want to separately save the pre-processed `ADSL` in our environment.\nInstead, we would apply the pre-processing within the `data` argument of the `init()` function, e.g., like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp <- teal::init(\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL) %>%\n      mutate_dataset(script = \"ADSL_preproc.R\"),\n    cdisc_dataset(\"ADAE\", ADAE),\n    cdisc_dataset(\"ADTTE\", ADTTE)\n    # <<additional data-set code>>\n  )\n  # , <<additional init arguments code>>\n)\n```\n:::\n\n\n**`modules`** The `modules` argument takes pre-defined or custom `teal` modules as input.\nA module or various modules need to be wrapped within the `modules()` function to work.\n\nIn this chapter we look at four useful modules from the `teal.modules.general` and the `teal.modules.clinical` packages to look at the data.\n\n| Module                  | Package                 | Purpose                                                                                  |\n|----------------------|---------------------|-----------------------------|\n| `tm_front_page()`       | `teal.modules.general`  | Creates a front page which should include project metadata and an application user guide |\n| `tm_data_table()`       | `teal.modules.general`  | Displays raw data tables                                                                 |\n| `tm_variable_browser()` | `teal.modules.general`  | Let's you look at distributions of variables.                                            |\n| `tm_t_summary()`        | `teal.modules.clinical` | Demographics table                                                                       |\n\n## `tm_front_page()`\n\nWe can use this module to create an informative front page of our app.\nThis will be the landing page for anyone clicking on the link to our application.\n\nThe front page allows you to set the context of the app and inform users how to use the app.\n\nIt can make sense to define inputs in the parameters section, especially for information that is suject to change or might get re-used.\nThis improves code re-usability.\n\n::: callout-tip\n## Package table\n\nWe can get all loaded packages with the command \\`.packages()\\`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(.packages())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"forcats\"               \"stringr\"               \"dplyr\"                \n [4] \"purrr\"                 \"readr\"                 \"tidyr\"                \n [7] \"tibble\"                \"tidyverse\"             \"sparkline\"            \n[10] \"teal.modules.clinical\" \"tern\"                  \"rtables\"              \n[13] \"formatters\"            \"teal.modules.general\"  \"teal\"                 \n[16] \"teal.transform\"        \"magrittr\"              \"shinyTree\"            \n[19] \"ggmosaic\"              \"ggplot2\"               \"scda\"                 \n[22] \"teal.data\"             \"shiny\"                 \"random.cdisc.data\"    \n[25] \"stats\"                 \"graphics\"              \"grDevices\"            \n[28] \"utils\"                 \"datasets\"              \"methods\"              \n[31] \"base\"                 \n```\n:::\n:::\n\n\nFurther, we can get the version number of each package via \\` packageVersion()\\`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '1.3.2'\n```\n:::\n:::\n\n\nWe can then create a data-frame listing all packages and versions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackage_table <- tibble(package = .packages(),\n       version =  sapply(X = .packages(), \n                         FUN = function(x) as.character(packageVersion(x))))\n```\n:::\n\n\n## \n:::\n\nYou can supply additional html tags using the `additional_tags`\\` argument.\nIf you just want to paste some extra text or your input already includes html tags, use `HTML()`\\`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just some extra text\nHTML(\"here is some extra text\")\n```\n\n::: {.cell-output-display}\n```{=html}\nhere is some extra text\n```\n:::\n\n```{.r .cell-code}\n# a more complex html input\nHTML('<div class=\"header\" checked>\n  <p>Ready to take the Shiny tutorial? If so</p>\n  <a href=\"shiny.rstudio.com/tutorial\">Click Here!</a>\n</div>')\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"header\" checked>\n  <p>Ready to take the Shiny tutorial? If so</p>\n  <a href=\"shiny.rstudio.com/tutorial\">Click Here!</a>\n</div>\n```\n:::\n:::\n\n\nYou can also use the `tagList()`\\` to create html code on the spot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntagList(tags$div(class = \"header\", checked = NA,\n                 tags$p(\"Ready to take the Shiny tutorial? If so\"),\n                 tags$a(href = \"https://docs.posit.co/resources/shiny/\", \"Click Here!\")\n))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"header\" checked>\n<p>Ready to take the Shiny tutorial? If so</p>\n<a href=\"https://docs.posit.co/resources/shiny/\">Click Here!</a>\n</div>\n```\n:::\n:::\n\n\nLearn more about html tags on [the shiny help page.](https://shiny.rstudio.com/articles/tag-glossary.html)\n\nmetadata has to be specified in the data argument, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL,\n      code = \"ADSL <- synthetic_cdisc_data(\\\"latest\\\")$adsl\",\n      metadata = list(\"Author\" = \"NEST team\", \"data_source\" = \"synthetic data\")\n    ),\n    check = TRUE\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parameters\nmolecule <- \"Gargamelumab\"\nauthor <- \"Stefan Thoma\" \nstudyid <- \"1509210419\"\n\n# Tables for the front page: \n# used packages:\npackage_table <- tibble(package = .packages(),\n       version =  sapply(X = .packages(), \n                         FUN = function(x) as.character(packageVersion(x))))\n# any other tables you want to include.\ncolor_table <- tibble(\n  color = c(\"green\", \"red\"),\n  meaning = c(\"ready\", \"not ready\")\n)\n\n\n\ntm_front_page(\n  label = \"Front page\", # what the navigation item should be called\n  header_text = c(\n    \"Molecule\" = molecule,\n    \"Study ID\" = studyid,\n    \"App Author\" = author,\n  ),\n  tables = list(package_table,\n                color_table),\n  additional_tags = tagList(tags$div(class = \"header\", checked = NA,\n                 tags$p(\"Ready to take the Shiny tutorial? If so\"),\n                 tags$a(href = \"https://docs.posit.co/resources/shiny/\", \"Click Here!\")\n)),\n  footnotes = c(\"X\" = \"is the first footnote\", \"Y is the second footnote\"),\n  show_metadata = TRUE\n)\n```\n:::\n\n\n## `tm_data_table()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_data_table()\n```\n:::\n\n\n## `tm_variable_browser`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_variable_browser()\n```\n:::\n\n\n## `tm_t_summary`\n\nDemographics table\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_t_summary()\n```\n:::\n\n\n**header**\n\n**footer**\n\n**id**\n\nCombining everything above, our `init()` function looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp <- teal::init(\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL) %>%\n      mutate_dataset(script = \"ADSL_preproc.R\"),\n    cdisc_dataset(\"ADAE\", ADAE),\n    cdisc_dataset(\"ADTTE\", ADTTE)\n  ),\n  modules = modules(\n    tm_front_page(\n      label = \"Study Information\",\n      header_text =\n        c(\"Info about data source\" = \"Random data are used that have been created with the 'scda' R package\"),\n      tables =\n        list(\n          \"packages used\" = package_table,\n          \"color table\" = color_table\n        ),\n      additional_tags = tagList(tags$div(class = \"header\", checked = NA,\n                                         tags$p(\"Ready to take the Shiny tutorial? If so\"),\n                                         tags$a(href = \"https://docs.posit.co/resources/shiny/\", \"Click Here!\")\n      )),\n      show_metadata = TRUE\n    ),\ntm_data_table(\"Data Table\"),\ntm_variable_browser(\"Variable Browser\"),\n    tm_t_summary(\n      label = \"Demographic Table\",\n      dataname = \"ADSL\",\n      arm_var = cs_arm_var,\n      summarize_vars = choices_selected(\n        choices = variable_choices(ADSL, demographic_variables),\n        selected = c(\"SEX\", \"AGE\", \"RACE\")\n      )\n    )\n  ),\n  header = \"My first application\",\n  footer = \"footer\"\n)\n```\n:::\n\n\n## Toy app\n\nWe have now gone through all steps to create your first teal app.\n\n\n::: {.cell file='R/data_app.R'}\n\n```{.r .cell-code}\n# data app\n## ---- load packages data app ----\nlibrary(random.cdisc.data) # this package provides the data used\nlibrary(teal.data)\nlibrary(scda)\nlibrary(teal.modules.general)\nlibrary(teal.modules.clinical)\nlibrary(sparkline)\nlibrary(teal)\nlibrary(tidyverse)\n\n\n## ---- load data data app ----\nADSL <- random.cdisc.data::cadsl\nADAE <- random.cdisc.data::cadae\nADTTE <- random.cdisc.data::cadtte\n\n## ---- parameter data app ----\n# metadata\nauthor <- \"Stefan Thoma\"\nmolecule <- \"hexadromedar\"\n\n# parameters\ndemographic_variables <- c(\"SEX\", \"AGE\", \"RACE\")\narm_vars <- \"ARM\"\n\ncs_arm_var <- choices_selected(\n  choices = variable_choices(ADSL, subset = arm_vars),\n  selected = \"ARM\"\n)\n\npackage_table <- tibble(package = .packages(),\n                        version =  sapply(X = .packages(), \n                                          FUN = function(x) as.character(packageVersion(x))))\n# any other tables you want to include.\ncolor_table <- tibble(\n  color = c(\"green\", \"red\"),\n  meaning = c(\"ready\", \"not ready\")\n)\n\n\n## ---- init data app ----\napp <- teal::init(\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL) %>%\n      mutate_dataset(script = \"ADSL_preproc.R\"),\n    cdisc_dataset(\"ADAE\", ADAE),\n    cdisc_dataset(\"ADTTE\", ADTTE)\n  ),\n  modules = modules(\n    tm_front_page(\n      label = \"Study Information\",\n      header_text =\n        c(\"Info about data source\" = \"Random data are used that have been created with the 'scda' R package\"),\n      tables =\n        list(\n          \"packages used\" = package_table,\n          \"color table\" = color_table\n        ),\n      additional_tags = tagList(tags$div(class = \"header\", checked = NA,\n                                         tags$p(\"Ready to take the Shiny tutorial? If so\"),\n                                         tags$a(href = \"https://docs.posit.co/resources/shiny/\", \"Click Here!\")\n      )),\n      show_metadata = TRUE\n    ),\ntm_data_table(\"Data Table\"),\ntm_variable_browser(\"Variable Browser\"),\n    tm_t_summary(\n      label = \"Demographic Table\",\n      dataname = \"ADSL\",\n      arm_var = cs_arm_var,\n      summarize_vars = choices_selected(\n        choices = variable_choices(ADSL, demographic_variables),\n        selected = c(\"SEX\", \"AGE\", \"RACE\")\n      )\n    )\n  ),\n  header = \"My first application\",\n  footer = \"footer\"\n)\n\n\n## ---- run data app ----\nshinyApp(app$ui, app$server)\n```\n:::\n\n\nThe output should look something like this:\n\n![Data App preview](figures_images/app_data_1.png){fig-alt=\"Our first app should look like this\"}\n\n## Production app\n",
    "supporting": [
      "data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}