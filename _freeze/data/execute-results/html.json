{
  "hash": "9ff53e0739a9cfeff490ee9d7db19a53",
  "result": {
    "markdown": "# Data app\n\n\n\n\n\nThe App created at the end of this chapter will be the basic building block of all subsequent chapters in this book. The structure of the app code will remain consistent throughout the book --- make sure you understand each line of code of the *toy* application at the end.\n\n**At the end of this chapter you should be able to**\n\n-   understand the code structure of `teal` apps\n-   understand the workflow to create a `teal` app\n-   install and load the relevant packages\n-   write your own app that displays data\n\n## Setup\n\nIn this tutorial we will be working with realistic looking but simulated data.\n\n\n::: {.cell file='R/snippets/install_packages.R'}\n\n```{.r .cell-code}\nif (!require(\"remotes\")) install.packages(\"remotes\")\n\n# install teal\nremotes::install_github(\"insightsengineering/teal@*release\")\n\n# install teal.modules.general\nremotes::install_github(\"insightsengineering/teal.modules.general@*release\")\n\n# install tern mmrm (required for teal.modules.clinical)\nremotes::install_github(\"insightsengineering/tern.mmrm@*release\")\n\n# install teal.modules.clinical\nremotes::install_github(\"insightsengineering/teal.modules.clinical@*release\")\n\n# install teal.modules.hermes\nremotes::install_github(\"insightsengineering/teal.modules.hermes@*release\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(random.cdisc.data) # this package provides the data used\nlibrary(teal.data)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: shiny\n```\n:::\n\n```{.r .cell-code}\nlibrary(scda)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThere are no scda.XXXX libraries installed, like scda.2022.\nPlease install an scda database to take full advantage of the scda package.\n```\n:::\n\n```{.r .cell-code}\nlibrary(teal.modules.general)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggmosaic\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: shinyTree\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: teal\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: teal.transform\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: magrittr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nYou are using teal version 0.12.0\n```\n:::\n\n```{.r .cell-code}\nlibrary(sparkline)\nlibrary(teal)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n✔ purrr   0.3.5      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()    masks magrittr::extract()\n✖ dplyr::filter()     masks stats::filter()\n✖ dplyr::lag()        masks stats::lag()\n✖ tidyr::replace_na() masks random.cdisc.data::replace_na()\n✖ purrr::set_names()  masks magrittr::set_names()\n```\n:::\n:::\n\n\nWe first load two synthetic data sets. `random.cdisc.data::cadsl` is a Subject Level Analysis Dataset (ADSL) with one record (row) per subject. The unique identifier per subject is stored in the variable `USUBJID`. According to [CDISC](https://www.cdisc.org/education/course/subject-level-analysis-dataset-adsl) the main purpose of ADSL is to provide a \"(...) source for denominators for populations of interest, stratification variables, and other important subject subgroups\".\n\nWe can now load the three data-sets:\n\nData Structure for Adverse Event Analysis\n\n| Data-set name | Explanation                          | Purpose        |\n|---------------|--------------------------------------|----------------|\n| ADSL          | Analysis data-set subject level      | Filtering      |\n| ADAE          | Analysis data-set for adverse events | Adverse events |\n| ADTTE         | Analysis data-set for time to event  | Efficacy       |\n\n\n::: {.cell}\n\n```{.r .cell-code}\nADSL <- random.cdisc.data::cadsl\nADAE <- random.cdisc.data::cadae\nADTTE <- random.cdisc.data::cadtte\n```\n:::\n\n\nLet's look at the first three rows of the data-frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(list(ADSL, ADAE, ADTTE), head, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 3 × 56\n  STUDYID USUBJID     SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n  <chr>   <chr>       <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n1 AB12345 AB12345-CH… id-128 CHN-3     32 YEARS M     ASIAN HISPA… CHN     Y    \n2 AB12345 AB12345-CH… id-262 CHN-15    35 YEARS M     BLAC… NOT H… CHN     N    \n3 AB12345 AB12345-RU… id-378 RUS-3     30 YEARS F     ASIAN NOT H… RUS     N    \n# … with 45 more variables: INVID <chr>, INVNAM <chr>, ARM <fct>, ARMCD <fct>,\n#   ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>, TRT01A <fct>, TRT02P <fct>,\n#   TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>,\n#   BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>, BMEASIFL <fct>, BEP01FL <fct>,\n#   AEWITHFL <fct>, RANDDT <date>, TRTSDTM <dttm>, TRTEDTM <dttm>,\n#   TRT01SDTM <dttm>, TRT01EDTM <dttm>, TRT02SDTM <dttm>, TRT02EDTM <dttm>,\n#   AP01SDTM <dttm>, AP01EDTM <dttm>, AP02SDTM <dttm>, AP02EDTM <dttm>, …\n\n[[2]]\n# A tibble: 3 × 92\n  STUDYID USUBJID     SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n  <chr>   <chr>       <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n1 AB12345 AB12345-BR… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n2 AB12345 AB12345-BR… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n3 AB12345 AB12345-BR… id-134 BRA-1     47 YEARS M     WHITE NOT H… BRA     Y    \n# … with 81 more variables: INVID <chr>, INVNAM <chr>, ARM <fct>, ARMCD <fct>,\n#   ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>, TRT01A <fct>, TRT02P <fct>,\n#   TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>,\n#   BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>, BMEASIFL <fct>, BEP01FL <fct>,\n#   AEWITHFL <fct>, RANDDT <date>, TRTSDTM <dttm>, TRTEDTM <dttm>,\n#   TRT01SDTM <dttm>, TRT01EDTM <dttm>, TRT02SDTM <dttm>, TRT02EDTM <dttm>,\n#   AP01SDTM <dttm>, AP01EDTM <dttm>, AP02SDTM <dttm>, AP02EDTM <dttm>, …\n\n[[3]]\n# A tibble: 3 × 68\n  STUDYID USUBJID     SUBJID SITEID   AGE AGEU  SEX   RACE  ETHNIC COUNTRY DTHFL\n  <chr>   <chr>       <chr>  <chr>  <int> <fct> <fct> <fct> <fct>  <fct>   <fct>\n1 AB12345 AB12345-BR… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n2 AB12345 AB12345-BR… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n3 AB12345 AB12345-BR… id-105 BRA-1     38 YEARS M     BLAC… HISPA… BRA     N    \n# … with 57 more variables: INVID <chr>, INVNAM <chr>, ARM <fct>, ARMCD <fct>,\n#   ACTARM <fct>, ACTARMCD <fct>, TRT01P <fct>, TRT01A <fct>, TRT02P <fct>,\n#   TRT02A <fct>, REGION1 <fct>, STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>,\n#   BMRKR2 <fct>, ITTFL <fct>, SAFFL <fct>, BMEASIFL <fct>, BEP01FL <fct>,\n#   AEWITHFL <fct>, RANDDT <date>, TRTSDTM <dttm>, TRTEDTM <dttm>,\n#   TRT01SDTM <dttm>, TRT01EDTM <dttm>, TRT02SDTM <dttm>, TRT02EDTM <dttm>,\n#   AP01SDTM <dttm>, AP01EDTM <dttm>, AP02SDTM <dttm>, AP02EDTM <dttm>, …\n```\n:::\n:::\n\n\n## Your first app\n\nAs is generally the case when you start a project, you should have an approximate idea of what you would like to achieve. In this case, the aim is to create an app that visualizes variables of three connected study data-sets.\n\n## Code structure\n\nFirst, you want to define the project metadata. This can include the author name, the study name, the molecule name, etc. then, we have a section where we can define parameters for the app. This can be simple parameter values but they can also be short code snippets that would otherwise often be repeated throughout the application, e.g. pre-selected variables of interest.\n\nAfter that, we define the app using the `init()` function. This function takes data, modules, and html input and returns a list (usually named `app`) containing the user interface (the `ui` object) and back end (the `server` object) of the application. In the final step we instantiate the app by calling `shinyApp(app$ui, app$server)`.\n\n## `init()`\n\nThe most crucial function of the `teal` package(s) is [the `teal::init()` function](https://insightsengineering.github.io/teal/main/reference/init.html?q=init#null), which is structured as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit(\n  data,\n  modules,\n  title = NULL,\n  filter = list(),\n  header = tags$p(\"Add Title Here\"),\n  footer = tags$p(\"Add Footer Here\"),\n  id = character(0)\n)\n```\n:::\n\n\nThe `init()` function sets up a shiny app that consists of `teal` modules. Let's go through the arguments:\n\n**`data`**\n\nIn the `data` argument we define one or more data-frames for the application. If more than one data-frames are specified, they should be combined as a list, e.g. `data = list(ADSL, ADTR)`. <!-- For relational data-sets you can define merge keys.  --> For ADaM data-sets, the package `teal.data` provides helper functions with which the `data` argument of `init()` can be specified, --- the `cdisc_data()` and the `cdisc_dataset()` functions. They allow the teal app to know the merge key variables of the data-sets. The `cdisc_data`function returns an S6 object.\n\n::: {#note:key .callout-note appearance=\"simple\"}\n`keys` are pre-specified variables in ADaM data to merge data-sets. Each type of data-set requires specific keys to be specified. The package `teal.data` automatically chooses the correct key variables based on the `dataname` for the following data-sets: ADSL, ADAE, ADEG, ADTTE, ADAETTE, ADCM, ADEX, ADLB, ADMH, ADQS, ADRS, ADSAFTTE, ADVS, ADDV, ADSUB, ADHY.\n\nIf you want to work with other ADaM data-sets you must specify the keys manually. ADTR is a Tumor Results Analysis data-set where there is one record (row) per subject. As of now, this is not part of the default cdisc keys in the `teal.data` package, so we would have to specify them manually:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nADTR <- random.cdisc.data::cadtr\n\n\ncdisc_data(\n  cdisc_dataset(\"ADSL\", ADSL),\n  cdisc_dataset(\"ADTR\", ADTR, keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\"))\n)\n```\n:::\n\n\nNote that all keys have to be specified.\n:::\n\n::: callout-important\n## pre-processing\n\nGenerally, it is recommended to collect all data pre-processing steps in a separate R-script, which can then directly be applied to the \\``cdisc_data()`\\` output. One such pre-processing steps could be the creation of a new variable in the ADSL data-set which splits patients into two age groups where patients younger than 40 are `AGEGR = 0` and patients older than 40 are `AGEGR = 1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# you would write this in a separate file directly, without the writeLines command.\nwriteLines(\n  text = \"\nADSL <- ADSL %>%\n  dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\",\n  con = \"ADSL_preproc.R\"\n)\n```\n:::\n\n\nThe resulting R file looks something like this:\n\n\n::: {.cell file='ADSL_preproc.R'}\n\n```{.r .cell-code}\nADSL <- ADSL %>%\n  dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nADSL_processed <- ADSL %>%\n  cdisc_dataset(\"ADSL\", .) %>%\n  mutate_dataset(script = \"ADSL_preproc.R\")\n# check if the new variable exists:\nADSL_processed$get_raw_data()$AGEGR\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n [38] 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0\n [75] 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1\n[112] 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0\n[149] 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n[186] 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0\n[223] 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0\n[260] 0 1 1 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n[297] 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0\n[334] 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1\n[371] 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\n```\n:::\n:::\n\n\nIn a real world case we would not necessarily want to separately save the pre-processed `ADSL` in our environment. Instead, we would apply the pre-processing within the `data` argument of the `init()` function, e.g., like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp <- teal::init(\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL) %>%\n      mutate_dataset(script = \"ADSL_preproc.R\"),\n    cdisc_dataset(\"ADAE\", ADAE),\n    cdisc_dataset(\"ADTTE\", ADTTE)\n    # <<additional dataset code>>\n  )\n  # , <<additional init arguments code>>\n)\n```\n:::\n\n:::\n\n### `modules`\n\n**header**\n\n**footer**\n\n**id**\n\nCombining everything above, our `init()` function looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp <- teal::init(\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL) %>%\n      mutate_dataset(script = \"ADSL_preproc.R\"),\n    cdisc_dataset(\"ADAE\", ADAE),\n    cdisc_dataset(\"ADTTE\", ADTTE)\n  ),\n  header = \"My first application\",\n  footer = \"footer\"\n)\n```\n:::\n\n\n## Toy app\n\nWe have now gone through all steps to create your first teal app.\n\n\n::: {.cell file='R/data_app.R'}\n\n```{.r .cell-code}\n# data app\n## ---- load packages data app ----\nlibrary(random.cdisc.data) # this package provides the data used\nlibrary(teal.data)\nlibrary(scda)\nlibrary(teal.modules.general)\nlibrary(sparkline)\nlibrary(teal)\nlibrary(tidyverse)\n\n## ---- parameter data app ----\nauthor <- \"Stefan Thoma\"\nmolecule <- \"hexadromedar\"\n\n\n## ---- load data data app ----\nADSL <- random.cdisc.data::cadsl\nADAE <- random.cdisc.data::cadae\nADTTE <- random.cdisc.data::cadtte\n\n\n## ---- init data app ----\napp <- teal::init(\n  data = cdisc_data(\n    cdisc_dataset(\"ADSL\", ADSL) %>%\n      mutate_dataset(script = \"ADSL_preproc.R\"),\n    cdisc_dataset(\"ADAE\", ADAE),\n    cdisc_dataset(\"ADTTE\", ADTTE)\n  ),\n  header = \"My first application\",\n  footer = \"footer\"\n)\n\n\n## ---- run data app ----\nshinyApp(app$ui, app$server)\n?teal.modules.clinical::tm_g_forest_tte\n```\n:::\n\n\nThe output should look something like this:\n\n![Data App preview](figures_images/app_data_1.png){fig-alt=\"Our first app should look like this\"}\n\n## Production app\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}