<!-- I can find the big teal apps on: https://docs.roche.com/doc/teal.gallery/2022_10_13/articles/sources.html -->

# Data app

```{r}
#| include: false
#| eval: true

# here I define parameters for this chapters



# this reads the data_app.R file and we can use subsections of this script as chunks here
# avoids rewriting
knitr::read_chunk(path = "R/data_app.R")
```

The App created at the end of this chapter will be the basic building block of all subsequent chapters in this book.
The structure of the app code will remain consistent throughout the book --- make sure you understand each line of code of the *toy* application at the end.

**At the end of this chapter you should be able to**

-   understand the code structure of `teal` apps
-   understand the workflow to create a `teal` app
-   install and load the relevant packages
-   write your own app that displays data

## Your first app

As is generally the case when you start a project, you should have an approximate idea of what you would like to achieve.
In this chapter, the aim is to create an app that visualizes variables of three connected study data-sets.
The app should also display meta-data guiding users through the app itself.

In most applications where `teal` apps are useful, the above should be included.
Therefore, all subsequent chapters are built upon the toy app created in this chapter.

## Code structure

-   First, you want to define the project metadata and load the required packages and the data.
    This can include the author name, the study name, the molecule name, etc.

-   Then, we have a section where we can define parameters for the app.
    Parameters can be simple (e.g. `background_color <- "gray"` ) but they can also be short code snippets that would otherwise often be repeated throughout the application, e.g. pre-selected variables of interest.

-   After that, we define the app using the `init()` function.
    This function takes data, modules, and html input and returns a list (usually named `app`) containing the user interface (the `ui` object) and back end (the `server` object) of the application.

-   In the final step we instantiate the app by calling `shinyApp(app$ui, app$server)`.

## Setup

In this tutorial we will be working with realistic looking but simulated data.

```{r, file = "R/snippets/install_packages.R"}
#| eval: FALSE
```

```{r load packages data app}
#| echo: false
#| message: false
```

We first load two synthetic data sets.
`random.cdisc.data::cadsl` is a Subject Level Analysis Dataset (ADSL) with one record (row) per subject.
The unique identifier per subject is stored in the variable `USUBJID`.
According to [CDISC](https://www.cdisc.org/education/course/subject-level-analysis-dataset-adsl) the main purpose of ADSL is to provide a "(...) source for denominators for populations of interest, stratification variables, and other important subject subgroups".

We can now load the three data-sets:

Data Structure for Adverse Event Analysis

| Data-set name | Explanation                          | Purpose        |
|---------------|--------------------------------------|----------------|
| ADSL          | Analysis data-set subject level      | Filtering      |
| ADAE          | Analysis data-set for adverse events | Adverse events |
| ADTTE         | Analysis data-set for time to event  | Efficacy       |

```{r load data data app}
```

Let's look at the first three rows of the data-frames.

```{r}
list(ADSL, ADAE, ADTTE) %>% map(head, 3)
```

## `init()`

The most crucial function of the `teal` package(s) is [the `teal::init()` function](https://insightsengineering.github.io/teal/main/reference/init.html?q=init#null), which is structured as follows:

```{r}
#| eval: FALSE
init(
  data,
  modules,
  title = NULL,
  filter = list(),
  header = tags$p("Add Title Here"),
  footer = tags$p("Add Footer Here"),
  id = character(0)
)
```

The `init()` function sets up a shiny app that consists of `teal` modules.
Let's go through the arguments:

**`data`**

In the `data` argument we define one or more data-frames for the application.
If more than one data-frames are specified, they should be combined as a list, e.g. `data = list(ADSL, ADTR)`.
<!-- For relational data-sets you can define merge keys.  --> For ADaM data-sets, the package `teal.data` provides helper functions with which the `data` argument of `init()` can be specified, --- the `cdisc_data()` and the `cdisc_dataset()` functions.
They allow the teal app to know the merge key variables of the data-sets.
The `cdisc_data`function returns an S6 object.

::: {#note:key .callout-note appearance="simple"}
`keys` are pre-specified variables in ADaM data to merge data-sets.
Each type of data-set requires specific keys to be specified.
The package `teal.data` automatically chooses the correct key variables based on the `dataname` for the following data-sets: `r paste(names(teal.data:::default_cdisc_keys), collapse = ", ")`.

If you want to work with other ADaM data-sets you must specify the keys manually.
ADTR is a Tumor Results Analysis data-set where there is one record (row) per subject.
As of now, this is not part of the default cdisc keys in the `teal.data` package, so we would have to specify them manually:

```{r}
#| eval: false
ADTR <- random.cdisc.data::cadtr


cdisc_data(
  cdisc_dataset("ADSL", ADSL),
  cdisc_dataset("ADTR", ADTR, keys = c("STUDYID", "USUBJID", "PARAMCD", "AVISIT"))
)
```

Note that all keys have to be specified.
:::

Often, pre-processing of data is still necessary.
Generally, it is recommended to collect all data pre-processing steps in a separate R-script, which can then directly be applied to the `cdisc_data()` output.
One such pre-processing steps could be the creation of a new variable in the ADSL data-set which splits patients into two age groups where patients younger than 40 are `AGEGR = 0` and patients older than 40 are `AGEGR = 1`.

```{r}
# you would write this in a separate file directly, without the writeLines command.
writeLines(
  text = "
ADSL <- ADSL %>%
  dplyr::mutate(AGEGR = if_else(AGE < 40, 0, 1, NA_real_))",
  con = "ADSL_preproc.R"
)
```

The resulting R file looks something like this:

```{r, file = "ADSL_preproc.R"}
```

```{r}
ADSL_processed <- ADSL %>%
  cdisc_dataset("ADSL", .) %>%
  mutate_dataset(script = "ADSL_preproc.R")
# check if the new variable exists:
ADSL_processed$get_raw_data()$AGEGR
```

In practice, we would not necessarily want to separately save the pre-processed `ADSL` in our environment.
Instead, we would apply the pre-processing within the `data` argument of the `init()` function, e.g., like this:

```{r}
#| eval: false
app <- teal::init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL) %>%
      mutate_dataset(script = "ADSL_preproc.R"),
    cdisc_dataset("ADAE", ADAE),
    cdisc_dataset("ADTTE", ADTTE)
    # <<additional data-set code>>
  )
  # , <<additional init arguments code>>
)
```

**`modules`** The `modules` argument takes pre-defined or custom `teal` modules as input.
A module or various modules need to be wrapped within the `modules()` function to work.

In this chapter we look at four useful modules from the `teal.modules.general` and the `teal.modules.clinical` packages to look at the data.

| Module                  | Package                 | Purpose                                                                                  |
|----------------------|---------------------|-----------------------------|
| `tm_front_page()`       | `teal.modules.general`  | Creates a front page which should include project metadata and an application user guide |
| `tm_variable_browser()` | `teal.modules.general`  | Let's you look at distributions of variables.                                            |
| `tm_data_table()`       | `teal.modules.general`  | Displays raw data tables                                                                 |
| `tm_t_summary()`        | `teal.modules.clinical` | Demographics table                                                                       |

## `tm_front_page()`

We can use this module to create an informative front page of our app.
This will be the landing page for anyone clicking on the link to our application.

The front page allows you to set the context of the app and inform users how to use the app.

It can make sense to define inputs in the parameters section, especially for information that is subject to change or might get re-used.
This improves code re-usability.

::: callout-tip
## Package table

We can get all loaded packages with the command \`.packages()\`:

```{r}
print(.packages())
```

Further, we can get the version number of each package via \` packageVersion()\`

```{r}
packageVersion("tidyverse")
```

We can then create a data-frame listing all packages and versions:

```{r}
(package_table <- tibble(
  package = .packages(),
  version = sapply(
    X = .packages(),
    FUN = function(x) as.character(packageVersion(x))
  )
))
```


:::

You can supply additional html tags using the `additional_tags` argument.
If you just want to paste some extra text or your input already includes html tags, use `HTML()`

```{r}
# just some extra text
HTML("here is some extra text")
# a more complex html input
HTML('<div class="header" checked>
  <p>Ready to take the Shiny tutorial? If so</p>
  <a href="shiny.rstudio.com/tutorial">Click Here!</a>
</div>')
```

You can also use the `tagList()` to create html code on the spot:

```{r}
tagList(tags$div(
  class = "header", checked = NA,
  tags$p("Ready to take the Shiny tutorial? If so"),
  tags$a(href = "https://docs.posit.co/resources/shiny/", "Click Here!")
))
```

Learn more about html tags on [the shiny help page](https://shiny.rstudio.com/articles/tag-glossary.html).


You can also specify metadata of your data-sets in the data argument, e.g.

```{r}
#| eval: false
data <- cdisc_data(
  cdisc_dataset("ADSL", ADSL,
    code = "ADSL <- synthetic_cdisc_data(\"latest\")$adsl",
    metadata = list("Author" = "NEST team", "data_source" = "synthetic data")
  ),
  check = TRUE
)
```

```{r}
#| eval: false
# Parameters
molecule <- "Gargamelumab"
author <- "Stefan Thoma"
studyid <- "1509210419"

# Tables for the front page:
# used packages:
package_table <- tibble(
  package = .packages(),
  version = sapply(
    X = .packages(),
    FUN = function(x) as.character(packageVersion(x))
  )
)
# any other tables you want to include.
color_table <- tibble(
  color = c("green", "red"),
  meaning = c("ready", "not ready")
)



tm_front_page(
  label = "Front page", # what the navigation item should be called
  header_text = c(
    "Molecule" = molecule,
    "Study ID" = studyid,
    "App Author" = author,
  ),
  tables = list(
    package_table,
    color_table
  ),
  additional_tags = tagList(tags$div(
    class = "header", checked = NA,
    tags$p("Ready to take the Shiny tutorial? If so"),
    tags$a(href = "https://docs.posit.co/resources/shiny/", "Click Here!")
  )),
  footnotes = c("X" = "is the first footnote", "Y is the second footnote"),
  show_metadata = TRUE # lets app users access the specified metadata.
)
```


## `tm_data_table()`

```{r}
#| eval: false
tm_data_table()
```


## `tm_variable_browser`

The `tm_variable_browser` lets app users look at summaries of variables in the data-set. 
This module does not require any additional inputs to its function to be useful. 
It's arguments do allow for some level of customization: 



```{r}
#| eval: false
?tm_variable_browser()
```

## `tm_t_summary`

Demographics table

```{r}
#| eval: false
tm_t_summary()
```

**header**

**footer**

**id**

Combining everything above, our `init()` function looks like this:

```{r init data app}
#| eval: false
```

## Toy app

We have now gone through all steps to create your first teal app.

```{r, file = "R/data_app.R"}
#| eval: false
```

The output should look something like this:

![Data App preview](figures_images/app_data_1.png){fig-alt="Our first app should look like this"}

## Production app


```{r}
{library(shiny)
  vwr = dialogViewer('Run Data App', width = 1600, height = 1200)
  runGadget(shinyAppDir(appDir = 'R'), viewer = vwr)
}
```

