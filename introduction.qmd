# Introduction


<!--# about teal -->



**At the end of this chapter you should be able to**

-   understand the structure of `teal` apps
-   understand the utility of `teal` apps
-   determine whether `teal` apps are useful for *you*

## Structure of `teal` apps

`teal` is a shiny-based modular framework. It provides an interactive user interface allowing users to customize tables and visualizations facilitating the exploration and analysis of clinical trial data.

Dynamic analysis and display control, data filtering and code reproducibility are included in each module.

`teal` modules are laid out in three panels.

-   The `Left Panel`, referred to as the encoding panel, includes elements used to adjust the output interactively.

-   The `Center Panel`, referred to as the output panel, where the tables and visualizations are displayed.

-   The `Right Panel`, referred to as the data filter panel, includes elements used to subset the data interactively.

The layout is pre-set within each module. However, user can decide overall tab order and nesting. See @fig-layout for the typical teal app structure.

::: {#fig-layout layout-ncol="1"}
![diagram](figures_images/teal_panel_layout.png){#fig-diagram fig-alt="Structure of a typical teal app"}

![example](figures_images/teal_panel_example.png){#fig-example fig-alt="Screenshot of an example teal app"}](genentech.shinyapps.io/teal_safety/)

typical teal app layout

:::

`teal` is part of the [pharmaverse](https://pharmaverse.org/) and is particularly built upon [tern](https://insightsengineering.github.io/tern/main/) and [rtables](https://roche.github.io/rtables/main/).


## Modules

`teal` modules are modular building blocks for your `teal` app. They implement specific app functionalities, such as outlier exploration, data visualizations, and survival analysis. Although modules can be created from scratch, many `teal` modules have already been released and can be found in the following packages:

-   `teal.modules.general`: general modules for exploring relational/independent/CDISC data

-   `teal.modules.clinical`: modules specific to CDISC data and clinical trial reporting

-   `teal.modules.hermes`: modules for analyzing [MultiAssayExperiment objects](https://bioconductor.org/packages/release/bioc/html/MultiAssayExperiment.html)


## Reproducibility

-   r output
-   shopping cart

## Conclusion / use cases

<!--# This chapter could use some input from others -->
`teal` applicatons allow individuals with little or no programming experience to extract insights from data, making it accessible to a broad audience.
The package is particularly aimed at statisticians and statistical programmers in the pharmaceutical industry working with standardized (CDISC) data-sets.
However, it is not limited to standardized data-sets and could be used in other fields as well. 
One of the key features of teal is its ability to ensure reproducibility through the generation of R code for the selected outputs. 
This is an important consideration for maintaining the accuracy and reliability of results. 
At present, teal is not intended for regulatory submission, but it may have potential for this purpose in the future.
